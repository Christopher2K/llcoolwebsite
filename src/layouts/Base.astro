---
import '@app/styles/app.css'

import i18next, { t } from 'i18next'
import { SEO } from 'astro-seo'
import { HeadHrefLangs } from 'astro-i18next/components'

import Nav from '@app/components/Nav.astro'
import Footer from '@app/components/Footer.astro'
import { getPageMetadataImage } from '@app/utils'

export interface Props {
  title?: string
  description?: string
  ogTitle?: string
  ogType?: 'website' | 'article'
  ogArticle?: {
    publishedTime?: string
    modifiedTime?: string
    authors?: string[]
    section?: string
    tags?: string[]
  }
}

const {
  title = t('seo:defaultTitle') as string,
  description = t('seo:defaultDescription') as string,
  ogTitle = title ?? (t('seo:defaultOgTitle') as string),
  ogType = 'website',
  ogArticle,
} = Astro.props

const ogImage = getPageMetadataImage(ogTitle)
const ogImageAlt = t('seo:defaultOgImageAlt', { title: ogTitle })

const lang = i18next.language
const langWithTerritory: Record<string, string> = {
  en: 'en_US',
  fr: 'fr_FR',
}
---

<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <HeadHrefLangs />
    <SEO
      charset="UTF-8"
      title={title}
      description={description}
      titleDefault={t('seo:defaultTitle')!}
      titleTemplate={t('seo:titleTemplate')!}
      openGraph={{
        basic: {
          title: ogTitle,
          image: ogImage,
          type: ogType,
        },
        article: ogArticle!, // Weird TS bug
        image: {
          alt: ogImageAlt,
          width: 1200,
          height: 627,
        },
        optional: {
          description: description,
          locale: langWithTerritory[lang]!,
          localeAlternate: Object.values(langWithTerritory),
        },
      }}
      twitter={{
        card: 'summary_large_image',
        site: '@llcoolchris_',
        creator: '@llcoolchris_',
        title: ogTitle,
        description,
        image: ogImage,
        imageAlt: ogImageAlt,
      }}
      extend={{
        meta: [
          {
            name: 'image',
            content: ogImage,
          },
        ],
      }}
    />

    <script is:inline>
      // Dark mode script
      // Also sets initial dark mode to avoid flash
      if (
        localStorage.theme === 'dark' ||
        (!('theme' in localStorage) &&
          window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        document.documentElement.classList.add('dark')
      } else {
        document.documentElement.classList.remove('dark')
      }
    </script>
  </head>

  <body class="bg-light dark:bg-dark">
    <div
      class="max-w-[1340px] mx-auto grid grid-rows-mobile md:grid-rows-none md:grid-cols-tablet lg:grid-cols-desktop"
    >
      <Nav />
      <main class="px-4 sm:px-6 min-h-screen">
        <slot />
      </main>
    </div>
    <Footer />

    <script is:inline>
      // Once everything is loaded
      document.documentElement.classList.add('switch-theme-animation')
    </script>
  </body>
</html>
